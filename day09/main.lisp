(ql:quickload '(:cl-ppcre :alexandria))
(use-package :alexandria)

(defun get-nums ()
  (labels ((parse-line (str)
	     (destructuring-bind (dir amt) (cl-ppcre:split " " str)
	       (cons (read-from-string dir) (parse-integer amt)))))
  (with-open-file (stream "input")
    (loop :for line = (read-line stream nil)
	  :while line
	  :collect (parse-line line)))))

(defun move-dir (pos dir)
  (case dir
    (U (list (car pos) (1+ (cadr pos))))
    (D (list (car pos) (1- (cadr pos))))
    (R (list (1+ (car pos)) (cadr pos)))
    (L (list (1- (car pos)) (cadr pos)))))

(defun catch-up (head tail)
  (if (= (reduce '+ (mapcar (compose 'abs '-) head tail)) 4)
      (mapcar (compose (curry '/ 2) '+) head tail)
      (if (= (apply 'max (mapcar (compose 'abs '-) head tail)) 2)
	  (cond
	    ((= (- (car tail) (car head)) 2)
	     (list (1- (car tail)) (cadr head)))
	    ((= (- (car tail) (car head)) -2)
	     (list (1+ (car tail)) (cadr head)))
	    ((= (- (cadr tail) (cadr head)) 2)
	     (list (car head) (1- (cadr tail))))
	    ((= (- (cadr tail) (cadr head)) -2)
	     (list (car head) (1+ (cadr tail)))))
	  tail)))

(defun part-1 ()
  (let ((insns (get-nums))
	(visited (make-hash-table :test 'equal)))
    (labels ((handle-insns (head tail insns)
	       (setf (gethash tail visited) t)
	       (when insns
		 (destructuring-bind (dir . amt) (car insns)
		   (if (= amt 0)
		       (handle-insns head tail (cdr insns))
		       (let* ((head (move-dir head dir))
			      (tail (catch-up head tail)))
			 (handle-insns head tail (cons `(,dir . ,(1- amt)) (cdr insns)))))))))
      (handle-insns '(0 0) '(0 0) insns)
      (hash-table-count visited))))

(defun catch-up-all (snek pos)
  (if (cdr snek)
      (let ((next (catch-up pos (car snek))))
	(multiple-value-bind (new-snek last)
	    (catch-up-all (cdr snek) next)
	  (values (cons pos new-snek) last)))
      (values (list pos (catch-up pos (car snek)))
	      (catch-up pos (car snek)))))

(defun part-2 ()
  (let ((insns (get-nums))
	(visited (make-hash-table :test 'equal)))
    (labels ((handle-insns (snek insns)
	       (when insns
		 (destructuring-bind (dir . amt) (car insns)
		   (if (= amt 0)
		       (handle-insns snek (cdr insns))
		       (let ((head (move-dir (car snek) dir)))
			 (multiple-value-bind (snek last)
			     (catch-up-all (cdr snek) head)
			   (setf (gethash last visited) t)
			   (handle-insns snek (cons `(,dir . ,(1- amt)) (cdr insns))))))))))
      (handle-insns (make-list 10 :initial-element '(0 0)) insns)
      (hash-table-count visited))))

